#!flask/bin/python3

from flask import Flask, request
from flask_restful import Api, Resource, reqparse
from filelock import FileLock

import os

app = Flask(__name__)
api = Api(app)

parser = reqparse.RequestParser()

USER_DATA = {
    "<%= @username %>": "<%= @password %>"
}

class SslRenewalService(Resource):
    def get(self):
        return 'This endpoint is intended to automate renewing ssl certificates, please use POST.'

    def post(self):
        lock_acquired = False

        parser.add_argument('password', type=str, required=True)
        parser.add_argument('service_state', type=str, required=True)
        parser.add_argument('service_type', type=str, required=True)
        parser.add_argument('service_description', type=str, required=True)
        parser.add_argument('username', type=str, required=True)
        args = parser.parse_args()

        if not args:
            return {'message': 'No input data provided'}, 400

        if not self.verify(args):
            return {'message': 'You either did not include the username/password or authentication failed'}, 401

        filename = '/mnt/mediawiki-static/private/miraheze/file_lock/tmp_file.lock'
        lock = FileLock(filename)

        while not lock_acquired:
            with lock:
                lock.acquire()
                try:
                    os.system("/home/sslrenewal/sslrenewal.py -s='{}' -t='{}' -d='{}'".format(
                        args['service_state'],
                        args['service_type'],
                        args['service_description']
                    ))
                    lock_acquired = True
                finally:
                    lock.release()
                    lock_acquired = True
        return '', 200

    def verify(self, args):
        if not (args['username'] and args['password']):
            return False
        return USER_DATA.get(args['username']) == args['password']

api.add_resource(SslRenewalService, '/api/v1/renew')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, threaded=True)
